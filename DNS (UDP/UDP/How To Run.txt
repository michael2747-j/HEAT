## Features

- **Automatic interface detection:** Captures on all interfaces in parallel, no manual selection needed.
- **Thread-safe logging:** All output is timestamped and written safely from multiple threads.
- **Protocol detection:** Identifies and logs DNS, BGP, IKE/IPsec, and WireGuard traffic.
- **No admin interaction required after launch.**

---

## Prerequisites

### 1. **Npcap**

Npcap is a modern packet capture driver for Windows, required for `pcap`-based programs.

- **Download Npcap:**  
  [https://nmap.org/npcap/](https://nmap.org/npcap/)
- **Install Npcap:**  
  - Run the installer.
  - **Check "Install Npcap in WinPcap API-compatible Mode"** (important for legacy compatibility).
  - Reboot if prompted.

### 2. **Visual Studio (2019 or newer recommended)**

- Download Community Edition:  
  [https://visualstudio.microsoft.com/downloads/](https://visualstudio.microsoft.com/downloads/)
- During installation, select the **"Desktop development with C++"** workload.

### 3. **WinPcap/Npcap Developer’s Pack (for headers and libs, if needed)**

- If not bundled with your pcap library, get from [Npcap SDK](https://nmap.org/npcap/#download).

---

## Building the Program

1. **Open Visual Studio.**
2. **Create a new "Console Application" project** (C++).
3. **Add your `.cpp` file** (copy-paste the provided code).
4. **Add include/library directories** if needed:
   - Project Properties → C/C++ → General → Additional Include Directories:  
     Add the path to Npcap/winpcap includes (e.g., `C:\Program Files\Npcap\Include`)
   - Project Properties → Linker → General → Additional Library Directories:  
     Add the path to Npcap/winpcap libs (e.g., `C:\Program Files\Npcap\Lib`)
5. **Link required libraries:**
   - Project Properties → Linker → Input → Additional Dependencies:  
     Add `wpcap.lib;ws2_32.lib;` (already in your code via `#pragma comment`)
6. **Build the project** (`Ctrl+Shift+B`).

---

## Running the Program

1. **Run as Administrator:**  
   - Right-click your `.exe` or the Visual Studio shortcut and select **"Run as administrator"** (required for packet capture).
2. **Observe Output:**  
   - The program will automatically start capturing on all interfaces.
   - Output will appear in the console and be saved to `capture_output.log` in the same directory.
3. **Stop the program:**  
   - Press `Ctrl+C` in the console to stop capturing.

---

## Usage Notes

- **Log File:**  
  All captured packet summaries are appended to `capture_output.log`.
- **No interface selection needed:**  
  The program captures on all interfaces in parallel.
- **Protocols tracked:**  
  - **DNS:** UDP/TCP port 53  
  - **BGP:** TCP port 179  
  - **IKE/IPsec:** UDP ports 500, 4500  
  - **WireGuard:** UDP port 51820
- **Firewall:**  
  Ensure your firewall allows Npcap and the program to capture traffic.

---

## Troubleshooting

- **No packets captured?**
  - Make sure you are running as administrator.
  - Check that Npcap is installed and in WinPcap-compatible mode.
  - Ensure your network interfaces are active and have traffic.
- **Build errors about missing headers/libs?**
  - Double-check your include and library directories in Visual Studio.
- **Log file not created?**
  - Ensure the program has write permissions in its directory.

---

## Example Output

```
Capturing on all available interfaces...
Press Ctrl+C to stop.
[DNS - UDP] 192.168.1.10:5353 -> 224.0.0.251:53
DNS Packet - ID: 1234, Flags: 0x8180, Questions: 1, Answers: 0
[BGP - TCP] 10.0.0.1:179 -> 10.0.0.2:12345
[WireGuard UDP] 192.168.1.10:51820 -> 192.168.1.20:51820
...
```