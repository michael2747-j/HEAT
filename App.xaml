<!--
    File: App.xaml
    Purpose: Defines shared resources, styles, and templates for HEAT application UI
    Created: June 2, 2025
    Last Modified: June 3, 2025
    Author: Anthony Samen
-->

<?xml version="1.0" encoding="utf-8"?> <!-- Declares XML version and encoding for this file -->
<Application
    x:Class="HEAT.App" <!-- Sets class for application entry point -->
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" <!-- Declares default XAML namespace for UI elements -->
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" <!-- Declares XAML namespace for XAML language features -->
    xmlns:local="using:HEAT"> <!-- Declares local namespace for referencing HEAT project types -->

    <Application.Resources> <!-- Begins shared resources section for entire application -->
        <ResourceDictionary> <!-- Container for resource definitions -->
            <ResourceDictionary.MergedDictionaries> <!-- Allows merging of external resource dictionaries -->
                <XamlControlsResources xmlns="using:Microsoft.UI.Xaml.Controls" /> <!-- Merges WinUI controls resources for consistent styling -->
            </ResourceDictionary.MergedDictionaries>

            <!-- Shared Brushes -->
            <SolidColorBrush x:Key="TabTextColor" Color="#C8C8C8"/> <!-- Light gray brush for tab text -->
            <SolidColorBrush x:Key="TabActiveColor" Color="#3737FF"/> <!-- Blue brush for active tab background -->
            <SolidColorBrush x:Key="TabInactiveColor" Color="#141414"/> <!-- Dark brush for inactive tab background -->
            <SolidColorBrush x:Key="TabHoverColor" Color="#5A5AFF"/> <!-- Lighter blue brush for tab hover state -->
            <SolidColorBrush x:Key="BorderBlue" Color="#3737FF"/> <!-- Blue brush for borders -->
            <SolidColorBrush x:Key="IconColor" Color="#C8C8C8"/> <!-- Light gray brush for icons -->

            <!-- Tab Button Template with color and scale animations -->
            <ControlTemplate x:Key="TabButtonTemplate" TargetType="Button"> <!-- Template for tab buttons, applies to Button controls -->
                <Grid> <!-- Layout container for template content -->
                    <VisualStateManager.VisualStateGroups> <!-- Manages visual states for button interaction -->
                        <VisualStateGroup x:Name="CommonStates"> <!-- Group for common button states -->
                            <VisualState x:Name="Normal"/> <!-- Default state, no animation -->
                            <VisualState x:Name="PointerOver"> <!-- State for mouse hover -->
                                <Storyboard> <!-- Animation sequence for hover state -->
                                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="OuterBorder" Storyboard.TargetProperty="Background">
                                        <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource TabHoverColor}"/> <!-- Changes background to hover color instantly -->
                                    </ObjectAnimationUsingKeyFrames>
                                    <DoubleAnimation Storyboard.TargetName="OuterBorder" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" To="1.06" Duration="0:0:0.08"/> <!-- Scales width up slightly -->
                                    <DoubleAnimation Storyboard.TargetName="OuterBorder" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" To="1.06" Duration="0:0:0.08"/> <!-- Scales height up slightly -->
                                </Storyboard>
                            </VisualState>
                            <VisualState x:Name="Pressed"> <!-- State for mouse or touch press -->
                                <Storyboard> <!-- Animation sequence for pressed state -->
                                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="OuterBorder" Storyboard.TargetProperty="Background">
                                        <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource TabHoverColor}"/> <!-- Sets background to hover color -->
                                    </ObjectAnimationUsingKeyFrames>
                                    <DoubleAnimation Storyboard.TargetName="OuterBorder" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" To="0.98" Duration="0:0:0.08"/> <!-- Scales width down slightly -->
                                    <DoubleAnimation Storyboard.TargetName="OuterBorder" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" To="0.98" Duration="0:0:0.08"/> <!-- Scales height down slightly -->
                                </Storyboard>
                            </VisualState>
                            <VisualState x:Name="Disabled"/> <!-- State for disabled button, no animation -->
                        </VisualStateGroup>
                    </VisualStateManager.VisualStateGroups>
                    <Border
                        x:Name="OuterBorder" <!-- Name for referencing in animations -->
                        Background="{TemplateBinding Background}" <!-- Binds background to button's Background property -->
                        BorderBrush="{TemplateBinding BorderBrush}" <!-- Binds border brush to button's BorderBrush property -->
                        BorderThickness="{TemplateBinding BorderThickness}" <!-- Binds border thickness to button's BorderThickness property -->
                        CornerRadius="{TemplateBinding CornerRadius}"> <!-- Binds corner radius to button's CornerRadius property -->
                        <Border.RenderTransform>
                            <ScaleTransform ScaleX="1" ScaleY="1"/> <!-- Sets initial scale for animations -->
                        </Border.RenderTransform>
                        <ContentPresenter
                            x:Name="ContentPresenter" <!-- Name for referencing content element -->
                            Content="{TemplateBinding Content}" <!-- Binds content to button's Content property -->
                            ContentTransitions="{TemplateBinding ContentTransitions}" <!-- Binds content transitions for animations -->
                            ContentTemplate="{TemplateBinding ContentTemplate}" <!-- Binds content template for custom content -->
                            HorizontalAlignment="Center" <!-- Centers content horizontally -->
                            VerticalAlignment="Center" <!-- Centers content vertically -->
                            Margin="{TemplateBinding Padding}" <!-- Binds margin to button's Padding property -->
                            Foreground="{TemplateBinding Foreground}" /> <!-- Binds text color to button's Foreground property -->
                    </Border>
                </Grid>
            </ControlTemplate>

            <!-- Tab Button Style -->
            <Style x:Key="TabButtonStyle" TargetType="Button"> <!-- Style for normal tab buttons -->
                <Setter Property="FontFamily" Value="Calibri"/> <!-- Sets font to Calibri -->
                <Setter Property="Foreground" Value="{StaticResource TabTextColor}"/> <!-- Sets text color to tab text color -->
                <Setter Property="Background" Value="{StaticResource TabInactiveColor}"/> <!-- Sets background to inactive color -->
                <Setter Property="BorderBrush" Value="{StaticResource BorderBlue}"/> <!-- Sets border to blue -->
                <Setter Property="BorderThickness" Value="2"/> <!-- Sets border thickness to 2 -->
                <Setter Property="CornerRadius" Value="10"/> <!-- Sets corner radius to 10 -->
                <Setter Property="Margin" Value="4,0"/> <!-- Sets horizontal margin to 4, vertical to 0 -->
                <Setter Property="Padding" Value="12,6"/> <!-- Sets horizontal padding to 12, vertical to 6 -->
                <Setter Property="FontSize" Value="18"/> <!-- Sets font size to 18 -->
                <Setter Property="Template" Value="{StaticResource TabButtonTemplate}"/> <!-- Applies custom tab button template -->
            </Style>
            <Style x:Key="ActiveTabButtonStyle" TargetType="Button" BasedOn="{StaticResource TabButtonStyle}"> <!-- Style for active tab button, inherits from normal tab style -->
                <Setter Property="Background" Value="{StaticResource TabActiveColor}"/> <!-- Sets background to active color -->
                <Setter Property="Foreground" Value="White"/> <!-- Sets text color to white -->
            </Style>

            <!-- Icon Button Template (scale on hover, no color change) -->
            <ControlTemplate x:Key="IconButtonTemplate" TargetType="Button"> <!-- Template for icon-only buttons -->
                <Grid> <!-- Layout container -->
                    <VisualStateManager.VisualStateGroups> <!-- Manages button states -->
                        <VisualStateGroup x:Name="CommonStates"> <!-- Group for common states -->
                            <VisualState x:Name="Normal"/> <!-- Default state, no animation -->
                            <VisualState x:Name="PointerOver"> <!-- State for mouse hover -->
                                <Storyboard> <!-- Animation for hover state -->
                                    <DoubleAnimation Storyboard.TargetName="IconPresenter" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" To="1.18" Duration="0:0:0.08"/> <!-- Scales icon width up -->
                                    <DoubleAnimation Storyboard.TargetName="IconPresenter" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" To="1.18" Duration="0:0:0.08"/> <!-- Scales icon height up -->
                                </Storyboard>
                            </VisualState>
                            <VisualState x:Name="Pressed"> <!-- State for pressed icon -->
                                <Storyboard> <!-- Animation for pressed state -->
                                    <DoubleAnimation Storyboard.TargetName="IconPresenter" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" To="0.92" Duration="0:0:0.08"/> <!-- Scales icon width down -->
                                    <DoubleAnimation Storyboard.TargetName="IconPresenter" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" To="0.92" Duration="0:0:0.08"/> <!-- Scales icon height down -->
                                </Storyboard>
                            </VisualState>
                            <VisualState x:Name="Disabled"/> <!-- State for disabled icon, no animation -->
                        </VisualStateGroup>
                    </VisualStateManager.VisualStateGroups>
                    <ContentPresenter
                        x:Name="IconPresenter" <!-- Name for referencing icon content -->
                        Content="{TemplateBinding Content}" <!-- Binds content to button's Content property -->
                        HorizontalAlignment="Center" <!-- Centers icon horizontally -->
                        VerticalAlignment="Center"> <!-- Centers icon vertically -->
                        <ContentPresenter.RenderTransform>
                            <ScaleTransform ScaleX="1" ScaleY="1"/> <!-- Sets initial scale for icon animations -->
                        </ContentPresenter.RenderTransform>
                    </ContentPresenter>
                </Grid>
            </ControlTemplate>

            <Style x:Key="IconButtonStyle" TargetType="Button"> <!-- Style for icon-only buttons -->
                <Setter Property="Background" Value="Transparent"/> <!-- Sets background to transparent -->
                <Setter Property="BorderThickness" Value="0"/> <!-- Removes border -->
                <Setter Property="Padding" Value="0"/> <!-- Removes padding -->
                <Setter Property="Template" Value="{StaticResource IconButtonTemplate}"/> <!-- Applies icon button template -->
            </Style>

            <!-- GLOBAL CENTERING STYLES -->
            <Style TargetType="Page"> <!-- Style for all Page elements -->
                <Setter Property="HorizontalAlignment" Value="Center"/> <!-- Centers page horizontally in window -->
                <Setter Property="VerticalAlignment" Value="Top"/> <!-- Aligns page to top of window -->
                <Setter Property="MaxWidth" Value="1200"/> <!-- Limits maximum width to 1200 units -->
                <Setter Property="Padding" Value="24"/> <!-- Sets padding around page content -->
            </Style>
            <Style TargetType="UserControl"> <!-- Style for all UserControl elements -->
                <Setter Property="HorizontalAlignment" Value="Center"/> <!-- Centers user control horizontally -->
                <Setter Property="VerticalAlignment" Value="Top"/> <!-- Aligns user control to top -->
                <Setter Property="MaxWidth" Value="1200"/> <!-- Sets maximum width to 1200 units -->
                <Setter Property="Padding" Value="24"/> <!-- Sets padding around user control content -->
            </Style>
        </ResourceDictionary>
    </Application.Resources>
</Application>
